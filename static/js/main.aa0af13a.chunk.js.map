{"version":3,"sources":["RandomProof.js","PfoorList.js","App.js","serviceWorker.js","index.js"],"names":["getRandomProof","randomNum","Math","floor","random","proofs","length","RandomProof","useState","proof","setProof","size","className","title","steps","map","entry","key","bonus","href","target","rel","styleProof","style","height","position","width","bottom","onClick","ProofList","modalVisible","setModalVisible","modalContent","setModalContent","emptyFooter","text","onPress","footer","setFooter","onSelect","rowID","link","row","maxHeight","window","open","cache","CellMeasurerCache","defaultHeight","fixedWidth","rowRenderer","index","parent","columnIndex","rowIndex","parseInt","Row","rowHeight","rowCount","scrollToIndex","localStorage","getItem","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","setItem","minWidth","visible","transparent","maskClosable","onClose","App","installModalVisible","setInstallModalVisible","undefined","installEvent","setInstallEvent","addEventListener","evt","e","selectedTab","setSelectedTab","disableBodyScroll","document","querySelector","id","top","unselectedTintColor","tintColor","barTintColor","Item","icon","FileUnknownOutlined","fontSize","selectedIcon","FileUnknownFilled","selected","ProfileOutlined","ProfileFilled","prompt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa0af13a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport proofs from './proofs.json'\nimport { WingBlank, WhiteSpace, Button } from 'antd-mobile'\n\nfunction getRandomProof() {\n  let randomNum = Math.floor(Math.random() * proofs.length)\n  return [proofs[randomNum], randomNum + 1] //133\n}\n\nfunction styleProof(proof) {\n  return (\n    <div>\n      <div className='bigProofTitle'>{proof[1]}. {proof[0].title}</div>\n\n      {proof[0].steps.map((entry) =>\n        <div key={Math.random()}>\n          <WhiteSpace size=\"sm\" />\n          <div className=\"bigProofSteps\"> {entry} </div>\n        </div>\n      )}\n\n      {proof[0].bonus !== \"\" ? (\n        <div>\n          <WhiteSpace size=\"xl\" />\n          <a href={proof[0].bonus} target=\"_blank\" rel=\"noopener noreferrer\">See more</a>\n        </div>\n      ) : (\n          <div></div>\n        )}\n\n    </div>\n  )\n}\n\nfunction RandomProof() {\n\n  const [proof, setProof] = useState(getRandomProof())\n\n  return (\n    <div>\n      <WingBlank>\n        <WhiteSpace size=\"lg\" />\n        {styleProof(proof)}\n        <WhiteSpace size=\"lg\" />\n      </WingBlank>\n\n      <div style={{ height: '48px' }} />\n      <div style={{ position: 'absolute', width: '100%', bottom: 0 }}>\n        <Button onClick={() => { setProof(getRandomProof()) }}><div className='handwritten'>GET RANDOM PROOF</div></Button>\n      </div>\n\n\n    </div>\n  )\n\n}\n\nexport default RandomProof","import React, { useState } from 'react'\nimport { Modal, Button, WhiteSpace } from 'antd-mobile'\nimport { List, CellMeasurer, CellMeasurerCache, AutoSizer } from 'react-virtualized'\nimport proofs from './proofs.json'\n\nfunction ProofList() {\n\n  const [modalVisible, setModalVisible] = useState(false)\n  const [modalContent, setModalContent] = useState()\n\n  let emptyFooter = [{\n    text: 'OK',\n    onPress: () => {\n      setModalVisible(false)\n    }\n  }]\n\n  let footerWithLink = (link) => [\n    {\n      text: 'More info',\n      onPress: () => {\n        window.open(link, \"_blank\")\n      }\n    }, {\n      text: 'OK',\n      onPress: () => {\n        setModalVisible(false)\n      }\n    }\n  ]\n\n  const [footer, setFooter] = useState(emptyFooter)\n\n\n  const onSelect = (rowID) => {\n    const row = proofs[rowID]\n    setModalContent(\n      <div style={{maxHeight: '400px'}}>\n        <div className=\"modalTitle\">{row.title}</div>\n        <WhiteSpace size='sm' />\n        {row.steps.map((entry) =>\n          <div key={Math.random()} className=\"modalEntry\">\n            {entry}\n          </div>\n        )}\n      </div>\n    )\n    if (row.bonus !== \"\") {\n      setFooter(footerWithLink(row.bonus))\n    }\n    setModalVisible(true)\n  }\n\n  const Row = (index) => (\n    <div key={index}>\n      <Button className='centerLeft listButton' onClick={() => { onSelect(index) }}>\n          <div><b>{(parseInt(index) + 1)}</b>. {proofs[index].title}</div>\n        </Button>  \n    </div>\n  );\n\n\n  let cache = new CellMeasurerCache({\n    defaultHeight: 44,\n    fixedWidth: true,\n  });\n\n  let rowRenderer = ({ index, style, key, parent }) => {\n    return (\n      <CellMeasurer\n        cache={cache}\n        columnIndex={0}\n        key={key}\n        parent={parent}\n        rowIndex={index}\n      >\n        <div style={style} key={key}>\n          { Row(index) }\n        </div>\n      </CellMeasurer>\n    );\n  }\n\n  return (\n    <div style={{ height: 'inherit' }}>\n\n      <AutoSizer>\n        {({ height, width }) => \n          <List\n            width={width}\n            height={height}\n            rowHeight={cache.rowHeight}\n            rowCount={proofs.length}\n            rowRenderer={rowRenderer}\n            scrollToIndex={parseInt( localStorage.getItem('lastItemIndex')) || 0}\n            onRowsRendered={({overscanStartIndex, overscanStopIndex, startIndex, stopIndex})=>{\n              localStorage.setItem('lastItemIndex', stopIndex)\n            }}\n          />\n        }\n      </AutoSizer>\n\n      <Modal\n        style={{maxHeight: '80%', minWidth: '85%'}}\n        visible={modalVisible}\n        transparent\n        maskClosable={true}\n        onClose={() => {\n          setModalVisible(false)\n        }}\n        footer={footer}\n      >\n        {modalContent}\n      </Modal>\n    </div>\n  )\n\n}\n\nexport default ProofList\n","import React, { useState } from 'react'\nimport { TabBar, Modal } from 'antd-mobile'\nimport { FileUnknownOutlined, FileUnknownFilled, ProfileOutlined, ProfileFilled } from '@ant-design/icons'\nimport { disableBodyScroll } from 'body-scroll-lock'\nimport RandomProof from './RandomProof'\nimport ProofList from './PfoorList'\nimport './App.css';\n\nfunction App() {\n\n  const [installModalVisible, setInstallModalVisible] = useState(false)\n  const [installEvent, setInstallEvent] = useState(undefined)\n  \n\n  window.addEventListener('appinstalled', (evt) => {\n    setInstallModalVisible(false)\n  })\n\n  window.addEventListener('beforeinstallprompt', (e) => {\n    setInstallEvent(e)\n    setInstallModalVisible(true)\n  })\n\n  const [selectedTab, setSelectedTab] = useState('tab1')\n\n  disableBodyScroll(document.querySelector('#appContainer'))\n\n  return (\n    <div className=\"App\" id=\"appContainer\">\n\n      <div style={{ position: 'fixed', height: '100%', width: '100%', top: 0 }}>\n        <TabBar\n          unselectedTintColor=\"#949494\"\n          tintColor=\"#33A3F4\"\n          barTintColor=\"white\">\n\n          <TabBar.Item\n            title=\"Random proof\"\n            key=\"randomProof\"\n            icon={<FileUnknownOutlined style={{ fontSize: '22px' }} />}\n            selectedIcon={<FileUnknownFilled style={{ fontSize: '22px' }} />}\n            selected={selectedTab === 'tab1'}\n            onPress={() => {\n              setSelectedTab('tab1')\n            }}\n          >\n            <RandomProof />\n          </TabBar.Item>\n\n          <TabBar.Item\n            title=\"All proofs\"\n            key=\"allProofs\"\n            icon={<ProfileOutlined style={{ fontSize: '22px' }} />}\n            selectedIcon={<ProfileFilled style={{ fontSize: '22px' }} />}\n            selected={selectedTab === 'tab2'}\n            onPress={() => {\n              setSelectedTab('tab2')\n            }}\n          >\n            <ProofList />\n          </TabBar.Item>\n\n        </TabBar>\n\n        <Modal\n          visible={installModalVisible}\n          transparent\n          maskClosable={false}\n          title={'Install app'}\n          footer={[{\n            text: \"NO\",\n            onPress: ()=>{\n              setInstallModalVisible(false)\n            }\n          },{\n            text: \"INSTALL\",\n            onPress: ()=>{\n              installEvent.prompt()\n            }\n          }]}\n        >\n          Please install app for better user experience.\n        </Modal>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}